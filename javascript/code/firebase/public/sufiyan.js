import { initializeApp } from "https://www.gstatic.com/firebasejs/11.2.0/firebase-app.js";
import {
  onAuthStateChanged,
  getAuth,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
} from "https://www.gstatic.com/firebasejs/11.2.0/firebase-auth.js";
import {
  addDoc,
  collection,
  getFirestore,
  doc,
  setDoc,
  getDoc,
  getDocs,
  orderBy,
  limit,
  query,
  where,
  deleteDoc
} from "https://www.gstatic.com/firebasejs/11.2.0/firebase-firestore.js";
import { getAnalytics } from "https://www.gstatic.com/firebasejs/11.2.0/firebase-analytics.js";

const firebaseConfig = {
  apiKey: "AIzaSyCmTMoyix09rR1fdQc24UECYXtrkkx2pUk",
  authDomain: "stopwatch-7922f.firebaseapp.com",
  databaseURL: "https://stopwatch-7922f.firebaseio.com",
  projectId: "stopwatch-7922f",
  storageBucket: "stopwatch-7922f.firebasestorage.app",
  messagingSenderId: "317708428739",
  appId: "1:317708428739:web:81c43ccdf53892f958c976",
  measurementId: "G-5QE4L0LS12",
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
const analytics = getAnalytics(app);

export async function signup(userDetails) {
  const { firstName, lastName, userName, email, password } = userDetails;
  try {
    const userCredential = await createUserWithEmailAndPassword(
      auth,
      email,
      password
    );
    console.log(
      userCredential?.user?.uid,
      "===>> hurraayyyy user registered successfully"
    );
    const { password: myPassword, ...userDetailsWithoutPassword } = userDetails;

    // addDoc -> creates document with a unique id generated by firebase
    // const docRef = await addDoc(
    //   collection(db, "users"),
    //   userDetailsWithoutPassword
    // );

    //setDoc -> creates document with a our given unique id generated
    // Add a new document in collection "cities"
    await setDoc(doc(db, "users", userCredential?.user?.uid), {
      userDetailsWithoutPassword,
    });

    console.log("===>> hurraayyyy user ka data store hogaya");
    alert("We are going to move you towards home page");
    setTimeout(() => {
      window.location.href = "../home/home.html";
    }, 60000);
  } catch (error) {
    const errorCode = error.code;
    const errorMessage = error.message;
    console.log(errorCode, "===>> aaahhhhh registeration failed");
    console.log(errorMessage, "===>> aaahhhhh registeration failed");
    alert(errorMessage);
  }
}

export function login(email, password) {
  signInWithEmailAndPassword(auth, email, password)
    .then((userCredential) => {
      // Signed in
      const user = userCredential.user;
      console.log("===>> Welcome to the game");
      alert("Moving you to home page");
      setTimeout(() => {
        window.location.href = "../home/home.html";
      }, 10000);
      // ...
    })
    .catch((error) => {
      const errorCode = error.code;
      const errorMessage = error.message;
      console.log(errorCode, "===>> errorCode");
      console.log(errorMessage, "===>> errorMessage");
    });
}

export function loginStateObserver() {
  return new Promise((resolve, reject) => {
    onAuthStateChanged(auth, (user) => {
      if (user) {
        // User is signed in, see docs for a list of available properties
        // https://firebase.google.com/docs/reference/js/auth.user
        const uid = user.uid;
        console.log(uid, "==>>> yeh wala banda login hai")
        resolve(uid)
        // ...
      } else {
        // User is signed out
        // ...
        alert("No User logged In, Sorry kicking you out")
        setTimeout(() => {
          window.location.href = '../index.html'
        }, 3000)
        reject("No User is logged In")
      }
    });
  })
}

export async function getSingleDocument(uid) {
  const docRef = doc(db, "users", uid);
  const docSnap = await getDoc(docRef);

  if (docSnap.exists()) {
    // console.log("Document data:  ==>>>> ", docSnap.data());
    const { userDetailsWithoutPassword } = docSnap.data();
    console.log(userDetailsWithoutPassword, "==>>> userDetailsWithoutPassword");
    return userDetailsWithoutPassword;
  } else {
    // docSnap.data() will be undefined in this case
    console.log("No such document!");
  }
}

export async function signout() {
  try {
    await signOut(auth);
    console.log("==>> signout successfully");
    setTimeout(() => {
      window.location.href = "../index.html";
    }, 3000);
  } catch (error) { }
}

export async function updateProfile(
  description,
  profilePicture,
  uid,
  userDetails
) {
  await setDoc(doc(db, "users", uid), {
    userDetailsWithoutPassword: {
      ...userDetails,
      description,
      profilePicture,
    },
  });

  console.log("==>> Hurray user profile updated successfully");
  window.location.reload();
}

export async function addASingleDocumentWithoutGivingUniqueId(postData) {
  try {
    const docRef = await addDoc(collection(db, "posts"), postData);
    console.log("Document written with ID: ", docRef.id);
  } catch (e) {
    console.error("Error adding document: ", e);
  }
}

export async function getAllPostsFromFirestore() {
  let posts = [];
  const q = query(collection(db, "posts"), orderBy("data"));
  const querySnapshot = await getDocs(q);
  querySnapshot.forEach((doc) => {
    // doc.data() is never undefined for query doc snapshots
    posts.push({
      id: doc.id,
      ...doc.data(),
    });
  });

  return new Promise((resolve, reject) => {
    resolve(posts)
  })
}


export async function getAllPostsOfASingleUser(loggedInUserId) {
  console.log(loggedInUserId, "==>> loggedInUserId")
  let posts = []
  const q = query(collection(db, "posts"), where("creatorUid", "==", loggedInUserId));

  const querySnapshot = await getDocs(q);
  querySnapshot.forEach((doc) => {
    // doc.data() is never undefined for query doc snapshots
    posts.push({
      id: doc.id,
      ...doc.data()
    })

  });
  return new Promise((resolve, reject) => {
    resolve(posts)
  })
}

export async function deleteFromFireStore(uid) {
  await deleteDoc(doc(db, "posts", uid));
  window.location.reload()
}

export async function updatePostFromFirebase(postUid, postData) {
  await setDoc(doc(db, "posts", postUid), postData);

  window.location.reload()
}